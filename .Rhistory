tp = tp
)) %>%
hc_plotOptions(
line = list(
step =  'left', marker = list(enabled = F, radius = 2, symbol = "circle"),
lineWidth = 1,
states = list(hover = list(lineWidthPlus = 2)))
# or 'center' or 'right')
) %>%
hc_colors( c(rep("#d9d9d9", length(unique(dd$season))-1), hcol)) %>%
hc_add_theme(hc_theme_tufte()) %>% #hc_add_theme(hc_theme_538())
hc_legend(enabled = F) %>%
hc_tooltip(
crosshairs = T,
useHTML = T,
formatter = JS("function() { return this.point.tp; }")#,
#positioner = JS("function () { return { x: this.chart.plotLeft + 15, y: this.chart.plotTop + 0 }; }")
) %>%
hc_yAxis(max = ymax, title = list(text = "Points", align = "high")) %>%
hc_xAxis(title = list(text = "Tour",  align = "high")) %>%
hc_title(text = team.sub, floating = T, align = "left", y = 10)
hchart(
dd, "line", hcaes(x = nmatch,
y = cum_pts,
group = season,
tp = tp
)) %>%
hc_plotOptions(
line = list(
step =  'left', marker = list(enabled = F, radius = 2, symbol = "circle"),
lineWidth = 1,
states = list(hover = list(lineWidthPlus = 2)))
# or 'center' or 'right')
) %>%
hc_colors( c(rep("#d9d9d9", length(unique(dd$season))-1), hcol)) %>%
hc_add_theme(hc_theme_tufte()) %>% #hc_add_theme(hc_theme_538())
hc_legend(enabled = F) %>%
hc_tooltip(
crosshairs = T,
useHTML = T,
formatter = JS("function() { return this.point.tp; }")#,
#positioner = JS("function () { return { x: this.chart.plotLeft + 15, y: this.chart.plotTop + 0 }; }")
) %>%
hc_yAxis(max = ymax, title = list(text = "Points", align = "high")) %>%
hc_xAxis(title = list(text = "Tour",  align = "high")) %>%
hc_title(text = team.sub, floating = T, align = "left", y = 30, x = 90)
hchart(
dd, "line", hcaes(x = nmatch,
y = cum_pts,
group = season,
tp = tp
)) %>%
hc_plotOptions(
line = list(
step =  'left', marker = list(enabled = F, radius = 2, symbol = "circle"),
lineWidth = 1,
states = list(hover = list(lineWidthPlus = 2)))
# or 'center' or 'right')
) %>%
hc_colors( c(rep("#d9d9d9", length(unique(dd$season))-1), hcol)) %>%
hc_add_theme(hc_theme_tufte()) %>% #hc_add_theme(hc_theme_538())
hc_legend(enabled = F) %>%
hc_tooltip(
crosshairs = T,
useHTML = T,
formatter = JS("function() { return this.point.tp; }")#,
#positioner = JS("function () { return { x: this.chart.plotLeft + 15, y: this.chart.plotTop + 0 }; }")
) %>%
hc_yAxis(max = ymax, title = list(text = "Points", align = "high")) %>%
hc_xAxis(title = list(text = "Tour",  align = "high")) %>%
hc_title(text = team.sub, floating = T, align = "left", y = 20, x = 80)
hchart(
dd, "line", hcaes(x = nmatch,
y = cum_pts,
group = season,
tp = tp
)) %>%
hc_plotOptions(
line = list(
step =  'left', marker = list(enabled = F, radius = 2, symbol = "circle"),
lineWidth = 1,
states = list(hover = list(lineWidthPlus = 2)))
# or 'center' or 'right')
) %>%
hc_colors( c(rep("#d9d9d9", length(unique(dd$season))-1), hcol)) %>%
hc_add_theme(hc_theme_tufte()) %>% #hc_add_theme(hc_theme_538())
hc_legend(enabled = F) %>%
hc_tooltip(
crosshairs = T,
useHTML = T,
formatter = JS("function() { return this.point.tp; }")#,
#positioner = JS("function () { return { x: this.chart.plotLeft + 15, y: this.chart.plotTop + 0 }; }")
) %>%
hc_yAxis(max = ymax, title = list(text = "Points", align = "high")) %>%
hc_xAxis(title = list(text = "Tour",  align = "high")) %>%
hc_title(text = team.sub, floating = T, align = "left", y = 15, x = 70)
hchart(
dd, "line", hcaes(x = nmatch,
y = cum_pts,
group = season,
tp = tp
)) %>%
hc_plotOptions(
line = list(
step =  'left', marker = list(enabled = F, radius = 2, symbol = "circle"),
lineWidth = 1,
states = list(hover = list(lineWidthPlus = 2)))
# or 'center' or 'right')
) %>%
hc_colors( c(rep("#d9d9d9", length(unique(dd$season))-1), hcol)) %>%
hc_add_theme(hc_theme_tufte()) %>% #hc_add_theme(hc_theme_538())
hc_legend(enabled = F) %>%
hc_tooltip(
crosshairs = T,
useHTML = T,
formatter = JS("function() { return this.point.tp; }")#,
#positioner = JS("function () { return { x: this.chart.plotLeft + 15, y: this.chart.plotTop + 0 }; }")
) %>%
hc_yAxis(max = ymax, title = list(text = "Points", align = "high")) %>%
hc_xAxis(title = list(text = "Tour",  align = "high")) %>%
hc_title(text = team.sub, floating = T, align = "left", y = 15, x = 70,
style = list(fontSize = "2em"))
hchart(
dd, "line", hcaes(x = nmatch,
y = cum_pts,
group = season,
tp = tp
)) %>%
hc_plotOptions(
line = list(
step =  'left', marker = list(enabled = F, radius = 2, symbol = "circle"),
lineWidth = 1,
states = list(hover = list(lineWidthPlus = 2)))
# or 'center' or 'right')
) %>%
hc_colors( c(rep("#d9d9d9", length(unique(dd$season))-1), hcol)) %>%
hc_add_theme(hc_theme_tufte()) %>% #hc_add_theme(hc_theme_538())
hc_legend(enabled = F) %>%
hc_tooltip(
crosshairs = T,
useHTML = T,
formatter = JS("function() { return this.point.tp; }")#,
#positioner = JS("function () { return { x: this.chart.plotLeft + 15, y: this.chart.plotTop + 0 }; }")
) %>%
hc_yAxis(max = ymax, title = list(text = "Points", align = "high")) %>%
hc_xAxis(title = list(text = "Tour",  align = "high")) %>%
hc_title(text = team.sub, floating = T, align = "left", y = 50, x = 70,
style = list(fontSize = "2.5em"))
ddd
nround
dd
dd$season
tail(dd$season, 1)
hc_historical_points_evolution <- function(
ts, ymax = ymax, team.sub = "BSC Young Boys", title = "", hcol = "#019875"
) {
dd <- ts %>% filter(team == team.sub)
dd %<>% mutate(
year = str_sub(season, 1, 4) %>% as.integer(),
color = ifelse(season == "201718", hcol, "#cccccc"),
tp =  str_c(
'<table class="table">',
'<tr><td><b>',
str_c(str_sub(season, 1,4), "-", str_sub(season, 5,6)), '</b></td><td><em>', team, '</em></td></tr>',
'<tr><td>Tour ', nmatch, '</td><td><b>', cum_pts, '</b> pts, classement <b>', rank,'</b></td></tr>',
'<tr><td>Classement final', '</td><td><b>', f_rank, '</b></td></tr>',
'</table>')
) %>%
arrange(season, nmatch)
hchart(
dd, "line", hcaes(x = nmatch,
y = cum_pts,
group = season,
tp = tp
)) %>%
hc_plotOptions(
line = list(
step =  'left', marker = list(enabled = F, radius = 2, symbol = "circle"),
lineWidth = 1,
states = list(hover = list(lineWidthPlus = 2)))
# or 'center' or 'right')
) %>%
hc_colors( c(rep("#d9d9d9", length(unique(dd$season))-1), hcol)) %>%
hc_add_theme(hc_theme_tufte()) %>% #hc_add_theme(hc_theme_538())
hc_legend(enabled = F) %>%
hc_tooltip(
crosshairs = T,
useHTML = T,
formatter = JS("function() { return this.point.tp; }")#,
#positioner = JS("function () { return { x: this.chart.plotLeft + 15, y: this.chart.plotTop + 0 }; }")
) %>%
hc_yAxis(max = ymax, title = list(text = "Points", align = "high")) %>%
hc_xAxis(title = list(text = "Tour",  align = "high")) %>%
hc_title(text = team.sub, floating = T, align = "left", y = 30, x = 70,
style = list(fontSize = "2.5em"))
}
current.team
current.team <- current_ts$team %>%
unique()
current.team
teams.sub %>% map(
~ hc_historical_points_evolution (ts, .x, ymax = ymax) +
theme(aspect.ratio = 1) #%>% ggsave ()
)
current.team %>% map(
~ hc_historical_points_evolution (ts, .x, ymax = ymax) +
theme(aspect.ratio = 1) #%>% ggsave ()
)
hcs <- current.team %>% map(
~ hc_historical_points_evolution (ts, .x, ymax = ymax) +
theme(aspect.ratio = 1) #%>% ggsave ()
)
hcs[[2]]
hcs
hcs <- current.team %>% map(
~ hc_historical_points_evolution (ts, .x, ymax = ymax)
)
hcs[[2]]
hcs[[3]]
hcs[[5]]
hcs[[10]]
bg_cols <- rep("#d9d9d9", length(unique(dd$season))-1)
bg_cols
library(tidyverse)
library(rvest)
url <- 'https://www.pyeongchang2018.com/en/game-time/results/OWG2018/en/general/athletes.htm'
session <- html_session(url)
sessions
session
form <- read_html(url) %>%
html_node("table form") %>% html_form()
formalArgs()
read_html(url)
read_html(url) %>%
html_node("table form") %>% html_nodes("#buttonEntriesCount")
read_html(url) %>%
html_nodes("#buttonEntriesCount")
read_html(url) %>%
html_nodes("#buttonEntriesCount") %>% html_form()
read_html(url) %>%
html_nodes("#buttonEntriesCount") %>% html_text()
read_html(url) %>%
html_nodes("#buttonEntriesCount li")
read_html(url) %>%
html_nodes("#buttonEntriesCount ul")
read_html(url) %>%
html_nodes("#buttonEntriesCount")
read_html(url) %>%
html_nodes(".dropdown-menu")
print_all_jobLevels <- F
# Personnes actives occupées de 15 ans ou plus selon la profession exercée (nomenclature: NSP 2000), le sexe et la nationalité
raw.xls <- "data/su-f-40.02.03.02.01.03.20.xlsx"
column_names <- c('division',	'classe', 'groupe', 'genre', 'description',
'total', 'hommes', 'femmes', 'suisses', 'étrangers')
column_types <- c('text', 'text', 'text', 'numeric', 'text',
'numeric', 'numeric', 'numeric', 'numeric', 'numeric')
library(tidyverse)
library(scales)
library(magrittr)
library(readxl)
library(countrycode)
library(swiMap)
library(swiTheme)
### Getting data in packages
### Interactive
# library(htmltools)
# library(shiny)
# library(swiRcharts)
# library(rCharts)
### Mapping
# require(rgdal)
# require(rgeos)
# require(maptools)
### Misc stuff
#require(classInt)
require(viridis)
sheets <- c("1970", "1980", "1990", "2000", "2010", "2013", "2016")
#sheet <- "2015"
data.read <- sheets %>% map_df(function(sheet) {
xl.read <- read_excel(
raw.xls, sheet = sheet, range = "A5:J525",
col_names = column_names, col_types = column_types) %>%
mutate(year = as.numeric(sheet))
xl.read[-1,]
})
# Put the isco codes into one column, add a column for the isco level
data <- data.read %>%
mutate(
division = ifelse(is.na(division), "", division),
classe = ifelse(is.na(classe), "", classe),
groupe = ifelse(is.na(groupe), "", groupe),
genre = ifelse(is.na(genre), "", genre) %>% as.character()
) %>%
unite(division, classe, groupe, genre, col = "code", sep ="") %>%
mutate(niveau = ifelse(str_length(code) >= 4, 4, str_length(code))) %>%
select(code, niveau, everything()) %>%
mutate(share_femmes = femmes/total, share_suisses = suisses/total)
# order job description
data %<>% mutate(description = fct_reorder(description, as.numeric(code)))
# overall share of women at work
d_all<- data %>%
filter(niveau == 1) %>%
group_by(year) %>%
summarise(
hommes = sum(hommes),
femmes = sum(femmes),
share_femmes = femmes / (hommes + femmes)) %>%
ungroup()
d_all %>%
mutate(femmes = femmes * -1) %>%
gather(sex, value, -share_femmes, -year) %>%
ggplot(aes(year, value, group = sex, fill = sex)) +
geom_area() +
swi_theme()
d_all %>%
ggplot(aes(year, share_femmes)) +
geom_area() +
swi_theme() +
scale_y_continuous(limits = c(0,1))
library(ggalt)
top50 <- data %>%
filter(year == 2016, niveau  == 4, code != "XXXXXX", !str_detect(code, "^9.*")) %>%
arrange(desc(total)) %>%
head(30) %>%
select(-suisses, -étrangers, -share_suisses) %>%
mutate(
share_hommes = 1 - share_femmes,
descr = fct_reorder(description, share_hommes)
)
# order job description by the share of women
gg <- top50 %>% ggplot(aes(x=share_femmes, xend=share_hommes, y=descr, group=descr)) +
geom_dumbbell(colour="#a3c4dc", size=1.5, colour_xend="#0e668b",
dot_guide=TRUE, dot_guide_size=0.15)
gg <- gg + scale_x_continuous(label=percent)
gg <- gg + labs(x=NULL, y=NULL)
gg <- gg + theme_bw()
gg <- gg + theme(plot.background=element_rect(fill="#f7f7f7"))
gg <- gg + theme(panel.background=element_rect(fill="#f7f7f7"))
gg <- gg + theme(panel.grid.minor=element_blank())
gg <- gg + theme(panel.grid.major.y=element_blank())
gg <- gg + theme(panel.grid.major.x=element_line())
gg <- gg + theme(axis.ticks=element_blank())
gg <- gg + theme(legend.position="top")
gg <- gg + theme(panel.border=element_blank())
gg
# DW export
top50 %>%
select(-niveau, -code, -year, -hommes, -femmes, -description) %>%
write_csv("input/dw_share_menWomen_top30_jobs_2016.csv")
data %>% filter(niveau == 1) %>%
ggplot(aes(x = year, y = hommes, group = description, fill = description)) +
geom_area() +
theme(legend.position = "top")
data %>% filter(niveau == 1) %>%
ggplot(aes(x = year, y = femmes, group = description, fill = description)) +
geom_area()+
theme(legend.position = "top")
d_flip <- data %>%
arrange(year) %>%
group_by(code) %>%
mutate(
majority_women_first = first(share_femmes) >= 0.5,
majority_women_last  = last(share_femmes)  >= 0.5,
delta_share = last(share_femmes) - first(share_femmes),
flip = ifelse(majority_women_first == majority_women_last, F, T)
) %>%
ungroup() %>%
arrange(desc(abs(delta_share)))
d_flip %>% filter(flip, niveau == 2, year == 2016)
d_flip %>% filter(flip, niveau == 4, year == 2016) %>% View()
d_flip %>% filter(flip, niveau == 4, year == 2016, total >= 1) %>%
select(code, niveau, description, total, share_femmes, delta_share) %>%
knitr::kable(caption = "Professions (of at least 1k job) flip from men to predominently women")
d_flip_l4 <- d_flip %>% filter(flip, niveau == 4, year == 2016, total >= 1) %>%
select(code, niveau, description, total, share_femmes, delta_share) %>%
mutate(
total_r = rank(-total),
share_femmes_r = rank(-share_femmes),
delta_share_r  = rank(-delta_share)
) %>%
group_by(code, niveau, description) %>%
mutate(
mean_r = mean(total_r, share_femmes_r, delta_share_r),
min_r = min(total_r, share_femmes_r, delta_share_r)
) %>%
ungroup() %>%
arrange(mean_r, min_r)
d_flip_l4
d_flip_l4 <- d_flip %>% filter(flip, niveau == 4, year == 2016, total >= 1) %>%
select(code, niveau, description, total, share_femmes, delta_share) %>%
mutate(
total_r = rank(-total),
share_femmes_r = rank(-share_femmes),
delta_share_r  = rank(-delta_share)
)
d_flip_l4
(d_flip_l4$total_r + d_flip_l4$share_femmes_r + d_flip_l4$delta_share_r) / 3
d_flip_l4 <- d_flip %>% filter(flip, niveau == 4, year == 2016, total >= 1) %>%
select(code, niveau, description, total, share_femmes, delta_share) %>%
mutate(
total_r = rank(-total),
share_femmes_r = rank(-share_femmes),
delta_share_r  = rank(-delta_share)
)
d_flip_l4$mean_r <- (d_flip_l4$total_r + d_flip_l4$share_femmes_r + d_flip_l4$delta_share_r) / 3
d_flip_l4 %<>% arrange(mean_r)
d_flip_l4
d_flip_l4 %>% View()
code_sub <- d_flip_l4 %>% .$code
code_sub
data %>% filter(code %in% code_sub)
head(data)
data %>%
filter(code %in% code_sub) %>%
arrange(desc(share_femmes))
plot_multip <- function(data, nn) {
ddd <- data %>% filter(niveau == nn) %>%
mutate(
wdescr = as.factor(str_wrap(str_c(description, code, sep =" - "), width = 25)) %>%
fct_reorder(share_femmes)
)
# Calculate the number of pages with 9 panels per page
n_pages<- ceiling(length(unique(ddd$description)) / 12)
for(i in seq_len(n_pages)) {
p <- ddd %>%
ggplot(aes(x = year, y = share_femmes, size = total, colour = share_femmes)) +
geom_line() + ylim(c(0,1)) +
geom_hline(yintercept = 0.5, colour = "darkgrey") +
facet_wrap_paginate(~ wdescr, nrow = 4, ncol = 3, page = i) +
swi_theme() +
scale_color_viridis(option="C", direction = -1) +
labs(title = str_c("isco level ", nn))
print(p)
}
library(ggforce) # for multi page facet charts
plot_multip <- function(data, nn) {
ddd <- data %>% filter(niveau == nn) %>%
mutate(
wdescr = as.factor(str_wrap(str_c(description, code, sep =" - "), width = 25)) %>%
fct_reorder(share_femmes)
)
# Calculate the number of pages with 9 panels per page
n_pages<- ceiling(length(unique(ddd$description)) / 12)
for(i in seq_len(n_pages)) {
p <- ddd %>%
ggplot(aes(x = year, y = share_femmes, size = total, colour = share_femmes)) +
geom_line() + ylim(c(0,1)) +
geom_hline(yintercept = 0.5, colour = "darkgrey") +
facet_wrap_paginate(~ wdescr, nrow = 4, ncol = 3, page = i) +
swi_theme() +
scale_color_viridis(option="C", direction = -1) +
labs(title = str_c("isco level ", nn))
print(p)
}
}
png("output/explore_flip_%02d.png", width = 700, height = 1000)
plot_multip(data %>%
filter(code %in% code_sub) %>%
arrange(desc(share_femmes)), 4)
dev.off()
dev.off()
getwd()
setwd("~/swissinfo/2017_10_03_jobGenderEvolution")
png("output/explore_flip_%02d.png", width = 700, height = 1000)
plot_multip(data %>%
filter(code %in% code_sub) %>%
arrange(desc(share_femmes)), 4)
dev.off()
cleanOutput <- F
require(lintr)
library(tidyverse)
library(magrittr)
library(stringr)
library(knitr)
library(countrycode)
library(swiMap)
library(swiTheme)
### Interactive
library(htmltools)
library(swiRcharts)
library(rCharts)
library(highcharter)
require(viridis)
# Personnes actives occupées de 15 ans ou plus selon la profession exercée (nomenclature: NSP 2000), le sexe et la nationalité
raw.xls <- "data/su-f-40.02.03.02.01.03.20.xlsx"
column_names <- c('division',	'classe', 'groupe', 'genre', 'description',
'total', 'hommes', 'femmes', 'suisses', 'étrangers')
column_types <- c('text', 'text', 'text', 'numeric', 'text',
'numeric', 'numeric', 'numeric', 'numeric', 'numeric')
sheets <- c("1970", "1980", "1990", "2000", "2010", "2013", "2016")
data.read <- sheets %>% map_df(function(sheet) {
xl.read <- read_excel(
raw.xls, sheet = sheet, range = "A5:J525",
col_names = column_names, col_types = column_types) %>%
mutate(year = as.numeric(sheet))
xl.read[-1,]
})
# Put the isco codes into one column, add a column for the isco level
data <- data.read %>%
mutate(
division = ifelse(is.na(division), "", division),
classe = ifelse(is.na(classe), "", classe),
groupe = ifelse(is.na(groupe), "", groupe),
genre = ifelse(is.na(genre), "", genre) %>% as.character()
) %>%
unite(division, classe, groupe, genre, col = "code", sep ="") %>%
mutate(niveau = ifelse(str_length(code) >= 4, 4, str_length(code))) %>%
select(code, niveau, everything()) %>%
mutate(share_femmes = femmes/total, share_suisses = suisses/total)
# order job description
data %<>% mutate(description = fct_reorder(description, as.numeric(code)))
data
